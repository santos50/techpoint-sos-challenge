{"version":3,"sources":["reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","actions/types.js","store.js","utils/setAuthToken.js","actions/authActions.js","components/private-route/PrivateRoute.js","components/home.component.js","components/signup.component.js","components/login.component.js","components/logout.component.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","type","payload","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","logoutUser","dispatch","localStorage","removeItem","connect","Component","component","rest","render","props","to","jwt","Home","j","getItem","verify","this","className","id","SignUp","onSubmit","bind","onChangeUsername","onChangePassword","onChangeEmail","username","password","email","createError","isSuccess","history","push","nextProps","setState","e","target","value","preventDefault","registerUser","name","placeholder","onChange","passsword","style","fontsize","color","href","userData","post","then","res","catch","err","response","data","withRouter","Login","passwordError","loginUser","htmlFor","setItem","jwt_decode","Logout","jwtToken","currentTime","Date","now","exp","location","App","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.61b3bca1.chunk.js","sourcesContent":["import {\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"../actions/types\";\nconst isEmpty = require(\"is-empty\");\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n  loading: false\n};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}","import { GET_ERRORS } from \"../actions/types\";\nconst initialState = {};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nexport default store;","import axios from \"axios\";\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/add\", userData)\n    .then(res => history.push(\"/sign-in\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/sign-in\" />\n      )\n    }\n  />\n);\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\nimport \"../home.css\";\nimport jwt_decode from \"jwt-decode\";\n\nconst jwt = require(\"jsonwebtoken\");\n\n\n\nclass Home extends Component {\n\nrender() {\n  const j = localStorage.getItem('jwtToken');\n  // const token = jwt.decode(j);\n\n//   var ca = localStorage.getItem('jwtToken');\n// var base64Url = ca.split('.')[1];\n// var decodedValue = JSON.parse(window.atob(base64Url));\n\nvar payload = jwt.verify(j, \"randomString\")\n\n    const { user } = this.props.auth;\n\nreturn (\n      <div className = \"Home\">\n <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n            <h1>\n       \n              <p>\n              <b>Hey there, {payload.user.id}</b>\n              </p>\n            </h1>\n\n            </div>\n            </div>\n      </div>\n    );\n  }\n}\n\nHome.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Home);","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport { Link, withRouter,  } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../actions/authActions\";\n\nimport Home from \"./home.component\";\n\n\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.onSubmit = this.onSubmit.bind(this);\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n        this.onChangeEmail = this.onChangeEmail.bind(this);\n\n\n        this.state = {\n          username: '',\n          password: '',\n          email: '',\n          createError: '',\n          isSuccess: false,\n        }\n      }\n\n      componentDidMount() {\n        // If logged in and user navigates to Register page, should redirect them to dashboard\n        if (this.props.auth.isAuthenticated) {\n          this.props.history.push(\"/home\");\n        }\n      }\n    \n\n      componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n          this.setState({\n            errors: nextProps.errors\n          });\n        }\n      }\n\n      \n      onChangeUsername(e) {\n        this.setState({\n          username: e.target.value\n        })\n      }\n\n      onChangePassword(e) {\n        this.setState({\n          password: e.target.value\n        })\n      }\n\n      onChangeEmail(e) {\n        this.setState({\n          email: e.target.value\n        })\n      }\n    \n      onSubmit(e) {\n        e.preventDefault();\n    \n        const user = {\n          username: this.state.username,\n          password: this.state.password,\n          email: this.state.email\n        }\n    \n        this.props.registerUser(user, this.props.history); \n        \n           this.setState({\n              name: '',\n              password: '',\n              email: '',\n              createError: 'Username or email is taken',\n            })\n        // axios.post('/add', user)\n        //   .then(res => {console.log(res.data);\n        //     this.setState({\n        //       isSuccess: true\n        //     })\n        //   })\n        //   .catch(error => {console.log(error);\n        //     this.setState({\n        //       name: '',\n        //       password: '',\n        //       email: '',\n        //       createError: 'Username or email is taken',\n        //     })\n        //   });\n    \n      }\n\n    render() {\n\n        return (\n          <div className = \"Main\">\n          <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n            <form onSubmit={this.onSubmit}>\n                <h3>Sign Up</h3>\n\n                <div className=\"form-group\">\n                    <label>Username</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Username\" value={this.state.username} onChange={this.onChangeUsername}/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Email address</label>\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" value={this.state.email} onChange={this.onChangeEmail}/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" value={this.state.passsword} onChange={this.onChangePassword}/>\n                    <div style={{ fontsize: 12, color: \"red\"}}>\n                        {this.state.createError}\n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n                <p className=\"forgot-password text-right\">\n                    Already registered? <a href=\"/sign-in\">Sign in</a>\n                </p>\n            </form>\n            </div>\n            </div>\n            </div>\n        );\n    }\n}\n\nSignUp.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(withRouter(SignUp));","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport SignUp from \"./signup.component\";\nimport { Route, Link} from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../actions/authActions\";\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.onSubmit = this.onSubmit.bind(this);\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n\n        this.state = {\n          username: '',\n          password: '',\n          passwordError: '',\n          isSuccess: false,\n        }\n      }\n    \n\n      componentDidMount() {\n   \n        // If logged in and user navigates to Login page, should redirect them to dashboard\n        if (this.props.auth.isAuthenticated) {\n          this.props.history.push(\"/home\");\n        }\n      }\n\n\n      // static getDerivedStateFromProps(nextProps, prevState) {\n      //   if (nextProps.total !== prevState.total) {\n      //     return ({ total: nextProps.total }) // <- this is setState equivalent\n      //   }\n      //   return null\n      // }\n\n      componentWillReceiveProps(nextProps) {\n        if (nextProps.auth.isAuthenticated) {\n          this.props.history.push(\"/home\"); // push user to dashboard when they login\n        }\n    if (nextProps.errors) {\n          this.setState({\n            errors: nextProps.errors\n          });\n        }\n      }\n\n\n      onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n      };\n\n      onChangeUsername(e) {\n        this.setState({\n          username: e.target.value\n        })\n      }\n\n      onChangePassword(e) {\n        this.setState({\n          password: e.target.value\n        })\n      }\n\n      onSubmit(e) {\n        e.preventDefault();\n    \n        const user = {\n          username: this.state.username,\n          password: this.state.password,\n        }\n\n\n        this.props.loginUser(user);\n       \n              this.setState({\n                username: '',\n                password: '',\n                passwordError: \"incorrect password\",\n              })\n      \n        // axios.post('/login', user)\n        //   .then(res => {\n        //     //localStorage.setItem('jwtToken', res.data.token);\n            \n\n        //       if (res.statusText == \"OK\") {\n        //          this.setState({\n        //              isSuccess: true\n        //          })\n                \n                 \n        //       }\n        //   })\n        //   .catch(res => {\n        //     console.log(\"login error\");\n\n        //     this.setState({\n        //         name: '',\n        //         password: '',\n        //         passwordError: \"incorrect password\",\n        //       })\n        // });\n      }\n\n\n    render() {\n      const { errors } = this.state;\n        // if (this.state.isSuccess == true) {\n        //   //   return (\n        //   //   <Link\n        //   //   exact\n        //   //   path to={\"/home\"}\n        //   //   render = {props => (\n        //   //     <Home\n        //   //       {...props}\n        //   //       loggedInStatus={this.state.loggedInStatus}\n        //   //     />\n        //   //   )}\n        //   // > </Link>\n          \n        //   //   )\n        //   return <Link className=\"Main\" to=\"/home\" component={Home}></Link>\n        // }\n        return (\n          <div className = \"Main\">\n          <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n            <form onSubmit={this.onSubmit}>\n                <h3>Sign In</h3>\n\n                <div className=\"form-group\">\n                    <label>Username</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter username\" value={this.state.username} onChange={this.onChangeUsername}/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\"  value={this.state.password} onChange={this.onChangePassword}/>\n                     <div style={{ fontsize: 12, color: \"red\"}}>\n                        {this.state.passwordError}\n                    </div> \n                </div>\n\n                <div className=\"form-group\">\n                    <div className=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n                <p className=\"forgot-password text-right\">\n                    Don't have an account? <a href=\"/sign-up\" component={SignUp}>Sign up</a>\n                </p>\n            </form>\n          </div>\n          </div>\n          </div>\n            \n        );\n    }\n}\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\nimport \"../home.css\";\n\nclass Logout extends Component {\n\n \n    componentDidMount() {\n   \n        // If logged in and user navigates to Login page, should redirect them to dashboard\n        if (localStorage.jwtToken) {\n            this.props.logoutUser();\n        }\n        this.props.history.push(\"/sign-in\");\n      }\n\nrender() {\n\nreturn (\n    // <Link to=\"/sign-in\" component={Login}></Link>\n    <div>Logout</div>\n    );\n  }\n}\n\nLogout.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Logout);","import React, { useEffect, Component } from 'react';\nimport './App.css';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\n\nimport Login from \"./components/login.component\";\nimport Logout from \"./components/logout.component\";\nimport SignUp from \"./components/signup.component\";\nimport Home from \"./components/home.component\";\n\n\n\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./sign-in\";\n  }\n}\n\n\n\nexport default class App extends Component {\n  \n \n  // useEffect(() => {\n  //   axios.get('/example')\n  //   .then(response => console.log(response))\n  //   .catch(err => console.log(err));\n\n  //   axios.get('/all')\n  //   .then(response => console.log(response))\n  //   .catch(err => console.log(err));\n\n  // });\n\n  render() {\n  return (\n    <Provider store={store}>\n  <Router>\n    \n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>WebsiteName</Link>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/home\"}>Home</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/logout\"}>Logout</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n     \n      \n     \n      {/* <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\"> */}\n        <Switch>\n            <Route exact path='/' component={Login} />\n            <Route path=\"/sign-in\" component={Login} />\n            <Route path=\"/sign-up\" component={SignUp} />\n            <Route path=\"/logout\" component={Logout}/>\n            <PrivateRoute exact path=\"/home\" component={Home} />\n          </Switch>\n        {/* </div>\n      </div> */}\n   </Router>\n   </Provider>\n  );\n}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}